---
jupyter:
  kernelspec:
    display_name: Python 3 (ipykernel)
    language: python
    name: python3
---

```{python}
import numpy as np
import pandas as pd
import os
import matplotlib
import matplotlib.pyplot as plt
import seaborn as sns
import glob
import ast 
import warnings
from matplotlib.lines import Line2D
from importlib import reload
import CellBoxAnalysisFuncs as caf
```

```{python}
mainRoot = os.getcwd()
```

```{python}
#| scrolled: true
reload(caf)
pearsonValues=[]
for index_num in range(2):
#     index_num +=1
    if len(str(index_num))==3:
        index = str(index_num)
    elif len(str(index_num))==2:
        index = "0"+str(index_num)
    else:
        index = "00"+str(index_num)
    print('Seed: '+str(index))

    os.chdir(mainRoot)
    root=os.getcwd()
    resultDirectory = 'Cellbox_t4_f936f7cf5644494f5b4a8f23aad47fe3'
    trialData = 'Cellbox_T4'
    noilist = np.arange(10)#[0:10]#[63,98,42,73,84,81,88,104,105]#[]#[63,98,42,73,84,81,88,100,101]
    
#     try:
    pearsonValue = caf.PlotFigure2ForRun(index,resultDirectory,trialData,root,noilist)
    pearsonValues.append(pearsonValue)
        
#     except:
#         print("Error for seed "+str(index))
```

```{python}
#| scrolled: true
pertT4 = pd.read_csv('/home/vboxuser/Documents/CellBoxProject/SongResults/connah/Cellbox_t4_best/pert_matr_t4.csv')
```

```{python}
pertT4 = pd.read_csv('/home/vboxuser/Documents/CellBoxProject/CellBox-master/cyano_rna_tests/Cellbox_t4/pert_matr_t4.csv',header=None)
```

```{python}
pertT4.shape
```

```{python}
reload(caf)
loss = pd.read_csv('/home/vboxuser/Documents/CellBoxProject/SongResults/connah/Cellbox_t4_best/record_eval.csv',usecols=range(8),header=None)

noi_index = np.genfromtxt('/home/vboxuser/Documents/CellBoxProject/CellBox-master/cyano_rna_tests/Cellbox_t4/node_index_t4.csv', 
                          dtype = str)[noilist]
# Combined plot
f, axes = plt.subplots(figsize = [12, 11])
plt.title('index')
# Panel A
ax = plt.subplot2grid((5, 2), (0, 0), rowspan=2)
nma = 10

# idx = np.where([x!='None' for x in loss['train_mse']])[0]
idx = np.where([x!='None' for x in loss.iloc[:,4]])[0]

def lsplit(lists):
    result = []
    temp_list = []
    for i in lists:
        if i == '0':
            #temp_list.append(i)
            result.append(temp_list)
            temp_list = []
        elif i != 'None':
            temp_list.append(i)
    result.append(temp_list)
    return result

split_iter = lsplit(loss.iloc[:,1])

sizes1 = 1
sizes2 = len(split_iter[1])+sizes1


# losssnip_t = loss['train_mse'][idx]
# losssnip_v = loss['valid_mse'][idx]
losssnip_t = loss.iloc[:,4][idx]
losssnip_v = loss.iloc[:,5][idx]

plt.plot(np.arange(sizes2-sizes1-nma+1), 
         caf.moving_average(np.array([float(x) for x in losssnip_t[sizes1:sizes2]]),n=nma), 
         alpha = 0.8, color="black",linestyle="dashed")
plt.plot(np.arange(sizes2-sizes1-nma+1), 
         caf.moving_average(np.array([float(x) for x in losssnip_v[sizes1:sizes2]]),n=nma), 
         alpha = 0.8, color="black")

plt.xlabel('Training iterations')
plt.ylabel('Mean Squared Error')
plt.title('Seed '+str(index))
custom_lines = [Line2D([0], [0], color='black',linestyle="dashed"), 
                Line2D([0], [0], color='black')]
legend = plt.legend(custom_lines, ['Training', 'Validation'], loc='upper right',
                    frameon=False)
ax.add_artist(legend)
plt.text(-0.13,1.02,'A', weight='bold',transform=ax.transAxes)

# Panel B
ax = plt.subplot2grid((5, 2), (0, 1), rowspan=2)


nlength=102

resultDirectory='/SongResults/connah/Cellbox_t4_best'
# resultDirectory='/home/vboxuser/Documents/CellBoxProject/SongResults/connah/Cellbox_t4_best'


trace, real, substageNum = caf.b2(root,resultDirectory,trialData,noilist,noi_index,index = index, condition = 0, nT = 500, nlength = nlength)

plt.xlabel('ODE simulation steps')
plt.ylabel('Cell Response', labelpad=-4)


trace_end=trace[-1,:]
print(trace.shape)


# Panel C
y_hat = pd.read_csv(glob.glob('best.y_hat*csv')[0], index_col = 0)#.values

y = pd.read_csv('../../../CellBox-master/cyano_rna_tests/Cellbox_t4/expr_matr_t4.csv', header = None)

ax = plt.subplot2grid((14, 2), (7, 0), rowspan=8)
x_all = y.iloc[0,0:98].values.flatten()
y_all = y_hat.iloc[0:9,1:99].values.flatten()
#     y_all = trace_end[1:99]

print('y_all')
print(y_all.shape)

#for t4, 0 to 40 and then 41 to 98
x_prot = y.iloc[0:9,0:40]
y_prot = y_hat.iloc[0:9,1:41]
x_mod = y.iloc[0:9,41:98]
y_mod = y_hat.iloc[0:9,42:99]

#     x_prot = y.iloc[0,0:40]
#     y_prot = y_all[0:40]
#     x_mod = y.iloc[0,41:98]
#     y_mod = y_all[41:98]

print('y_mod')
print(y_mod.shape)
print('x_mod')
print(x_mod.shape)


plt.scatter(x_prot, y_prot, s = 15, alpha = 0.7, color="#74A6D1",zorder=3)
plt.scatter(x_mod, y_mod, s = 15, alpha = 0.7, color="#3D6CA3",zorder=4)
plt.legend(["Molecular (protein) nodes","Modulon nodes"], loc="upper right", frameon=False,
          handletextpad=0.1, fontsize=7.5)
#plt.plot([-10, 10], [-10, 10], c = 'white', alpha = 0, ls = '--')
sns.regplot(x=x_all, y=y_all, scatter_kws={'s': 15, 'alpha': 0},line_kws={'color': '#1B406C', 'alpha': 1})

lower = np.min([x_all, y_all])
upper = np.max([x_all, y_all])

plt.xlim([lower*1.2, upper*1.2])
plt.ylim([lower*1.2, upper*1.2])
r = np.corrcoef(x_all, y_all)[0][1]
plt.text(x = 12, y= 10, s='Pearson\'s ρ: \n ρ = %1.3f'%r,size = 8.5)
plt.xlabel('Experimental response')
plt.ylabel('Predicted response')
#plt.title("Correlation between predictions and \n experiments across all conditions", weight='bold', size=15)

plt.text(-0.13,1.06,'C', weight='bold',transform=ax.transAxes)
plt.show()
```

```{python}
yhat_data = pd.read_csv('/home/vboxuser/Documents/CellBoxProject/results/Cellbox_t4_osc_2/seed_001/4_best.y_hat.loss.267.29746490478516.csv')
```

```{python}
yhat_data.shape
```

```{python}
display(yhat_data)
```

```{python}
#| scrolled: true
reload(caf)
pearsonValuesOsc=[]
for index_num in range(1000):
#     index_num +=1
    if len(str(index_num))==3:
        index = str(index_num)
    elif len(str(index_num))==2:
        index = "0"+str(index_num)
    else:
        index = "00"+str(index_num)
    print('Seed: '+str(index))

    os.chdir(mainRoot)
    root=os.getcwd()
    resultDirectory = 'Cellbox_t4_osc_2150c2ac0c3daba5f86c31e39a18fc24'
    trialData = 'Cellbox_T4'
    noilist = [63,98,42,73,84,81,88,104,105]#[]#[63,98,42,73,84,81,88,100,101]
    
    try:
        pearsonValue = caf.PlotFigure2ForRun(index,resultDirectory,trialData,root,noilist)
        pearsonValuesOsc.append(pearsonValue)
        
    except:
        print("Error for seed "+str(index))
```

```{python}
#| scrolled: true
reload(caf)
pearsonValuesOsc_1=[]
for index_num in range(1000):
#     index_num +=1
    if len(str(index_num))==3:
        index = str(index_num)
    elif len(str(index_num))==2:
        index = "0"+str(index_num)
    else:
        index = "00"+str(index_num)
    print('Seed: '+str(index))

    os.chdir(mainRoot)
    root=os.getcwd()
    resultDirectory = 'Cellbox_t4_osc_1_6dfb10c2f8b53925f7549ed13195b9ff'
    trialData = 'Cellbox_T4'
    noilist = [63,98,42,73,84,81,88,104,105]#[]#[63,98,42,73,84,81,88,100,101]
    
    try:
        pearsonValue = caf.PlotFigure2ForRun(index,resultDirectory,trialData,root,noilist)
        pearsonValuesOsc_1.append(pearsonValue)
        
    except:
        print("Error for seed "+str(index))
```

```{python}
root=os.getcwd()
resultDirectory = 'Cellbox_t4_osc_1_6dfb10c2f8b53925f7549ed13195b9ff'
trialData = 'Cellbox_T4'

index = '001'
    
t4PertNewdf = pd.read_csv('CorrectedData/Cellbox_T4/pert_matr.csv',header=None)
t4ExprNewdf = pd.read_csv('CorrectedData/Cellbox_T4/expr_matr.csv',header=None)
t4NodeNewdf = pd.read_csv('CorrectedData/Cellbox_T4/node_index.csv',header=None)
os.chdir(root+'/results/'+str(resultDirectory)+'/seed_'+str(index)+'/')
substageNum=6
isNotFound=True
while(substageNum>0 and isNotFound):
    try:

        alpha = pd.read_csv(glob.glob(str(substageNum)+'_best.alpha*csv')[0], index_col = 0).values
        eps = pd.read_csv(glob.glob(str(substageNum)+'_best.eps*csv')[0], index_col = 0).values
        w = pd.read_csv(glob.glob(str(substageNum)+'_best.W*csv')[0], index_col = 0).values
        isNotFound = False
    except:
        substageNum -=1
print('substageNum: '+str(substageNum)) 

```

```{python}
#| scrolled: true
t4PertNewdf
```

```{python}
#| scrolled: true
reload(caf)
nlength=106
os.chdir(mainRoot)
root=os.getcwd()
resultDirectory = 'Cellbox_t4_osc_1_6dfb10c2f8b53925f7549ed13195b9ff'
trialData = 'Cellbox_T4'
noilist = [63,98,42,73,84,81,88,104,105]#[]#[63,98,42,73,84,81,88,100,101]

t4PertNewdf = pd.read_csv('CorrectedData/'+str(trialData)+'/pert_matr.csv',header=None)
conditionDf=pd.DataFrame()
conditionDf['light_itensity']=t4PertNewdf.iloc[:,103]
conditionDf['sin_hours']=t4PertNewdf.iloc[:,104]
conditionDf['cos_hours']=t4PertNewdf.iloc[:,105]

conditionResultsDf=pd.DataFrame()
traceVec=[]
noi_index = np.genfromtxt(root+'/CorrectedData/'+str(trialData)+'/node_index.csv', 
                              dtype = str)[noilist]

for condition in range(t4PertNewdf.shape[0]):
    trace, real, substageNum = caf.b(root,resultDirectory,trialData,noilist,noi_index,index = index, condition = condition, nT = 500, nlength = nlength)

    plt.xlabel('ODE simulation steps')
    plt.ylabel('Cell Response', labelpad=-4)
    plt.show()

    traceVec.append(trace[-1])
```

```{python}
conditionResultsDf=pd.DataFrame(traceVec,columns=[str(i) for i in range(len(traceVec[0]))])
# conditionResultsDf['0']=traceVec[0]

# condition, timepoint, protein
display(conditionResultsDf)
```

```{python}
conditionDf.shape[0]
```

```{python}
circadianTimeVec=[]
conditionDf['circadian_time']=np.zeros(conditionDf.shape[0])
for con in conditionDf.index:
    conditionRow=conditionDf.loc[con]
    
    for cir in light_sin_cos_encoding.index:
        cirRow=light_sin_cos_encoding.loc[cir]
        
        if conditionRow['sin_hours'] == cirRow['Hour_Sin'] and conditionRow['cos_hours'] == cirRow['Hour_Cos'] and conditionRow['light_itensity'] == cirRow['Light']:
            circadianTimeVec.append(cirRow['Circadian_time_h'])
            conditionDf.at[con,'circadian_time'] = cirRow['Circadian_time_h'].copy()
            break
```

```{python}
len(circadianTimeVec)
```

```{python}
conditionDf['circadian_time']=[0.5,2,4,6,8,9,10,12,10,4,6,8,9,10,12,8,8.25,8.5,9,9.25,9.5,10,8,8.25,8.5,9,9.25,9.5,10]
```

```{python}
#| scrolled: true
conditionDf
```

```{python}
#| scrolled: true
light_sin_cos_encoding
```

```{python}
np.var(conditionResultsDf.iloc[:,1])
```

```{python}
from scipy.stats import linregress
import scipy as sc
```

```{python}
#| scrolled: true
for i in range(conditionResultsDf.shape[1]):
    linOut=linregress(conditionDf['light_itensity'],conditionResultsDf.iloc[:,i])
    
    if linOut.pvalue < 0.9:
        print(linOut)
        
        plt.scatter(x=conditionDf['light_itensity'],y=conditionResultsDf.iloc[:,i])
        plt.xlabel('light_intensity')
        plt.ylabel(t4NodeNewdf.iloc[i].values[0])
        plt.show()
        try:
            fftOut=fft(conditionResultsDf.iloc[:,i])
            print('FFT:')
            print(fftOut)
        except:
            print("no fft")
```

```{python}
#| scrolled: true

for i in range(conditionResultsDf.shape[1]):
    linOut=linregress(conditionDf['circadian_time'],conditionResultsDf.iloc[:,i])

#     if linOut.pvalue < 0.9:
    print(linOut)
    plt.scatter(x=conditionDf['circadian_time'],y=conditionResultsDf.iloc[:,i])
    plt.xlabel('Circadian Time')
    plt.ylabel(t4NodeNewdf.iloc[i].values[0])
    plt.show()
```

```{python}
#| scrolled: false
potential_circadian_signals=[]
for i in range(conditionResultsDf.shape[1]):
    linOut=linregress(conditionDf['circadian_time'],conditionResultsDf.iloc[:,i])

    if linOut.pvalue < 0.9:
        print(linOut)
        plt.scatter(x=conditionDf['circadian_time'],y=conditionResultsDf.iloc[:,i])
        plt.xlabel('Circadian Time')
        plt.ylabel(t4NodeNewdf.iloc[i].values[0])
        plt.show()
        potential_circadian_signals.append(t4NodeNewdf.iloc[i].values[0])
#         try:
        fftOut=sc.fftpack.fft(conditionResultsDf.iloc[:,i].values)
# #             print('FFT:')
#         plt.plot(fftOut)
#         plt.show()
        
#         fftOut=sc.fftpack.fft((signal).values)
#             print('FFT:')
        revfft = sc.fftpack.ifft((fftOut))
        N=len(fftOut)
        n=np.arange(N)
        sr=1/12
        T=12#N/sr
        freq=n/T
        # plt.plot(fftOut)
        plt.stem(freq,fftOut,'b',markerfmt=" ",basefmt='-b')
#         plt.stem(freq,np.abs(fftOut),'b',markerfmt=" ",basefmt='-b')
        plt.xlabel('Freq (Hz)')
        plt.ylabel('FFT Amplitude')
        plt.show()
```

```{python}
len(potential_circadian_signals)
```

```{python}
HrcA	SYNPCC7942_RS03160	groES
CcmR	SYNPCC7942_RS06700	cmpA
rre1	SYNPCC7942_RS09435	dnaK2
```

```{python}
#| scrolled: true
potential_circadian_signals
```

```{python}
#| scrolled: true
conditionDf
```

```{python}
plt.scatter(x=conditionDf['circadian_time'],y=conditionDf['light_itensity'])
```

```{python}
plt.scatter(x=conditionDf['circadian_time'],y=conditionDf['cos_hours'])
```

```{python}
#| scrolled: true
for i in range(conditionResultsDf.shape[1]):
    linOut=linregress(12*np.arccos(conditionDf['cos_hours'])/np.pi,conditionResultsDf.iloc[:,i])
    if linOut.pvalue < 0.9:
        print(linOut)
        plt.scatter(x=12*np.arccos(conditionDf['cos_hours'])/np.pi,y=conditionResultsDf.iloc[:,i])
        plt.xlabel('Circadian Time')
        plt.ylabel(t4NodeNewdf.iloc[i].values[0])
        plt.show()
#         try:
        fftOut=sc.fftpack.fft(conditionResultsDf.iloc[:,i].values)
# #             print('FFT:')
#         plt.plot(fftOut)
#         plt.show()
        
#         fftOut=sc.fftpack.fft((signal).values)
#             print('FFT:')
        revfft = sc.fftpack.ifft((fftOut))
        N=len(fftOut)
        n=np.arange(N)
        sr=1/12
        T=12#N/sr
        freq=n/T
        # plt.plot(fftOut)
        plt.stem(freq,fftOut,'b',markerfmt=" ",basefmt='-b')
#         plt.stem(freq,np.abs(fftOut),'b',markerfmt=" ",basefmt='-b')
        plt.xlabel('Freq (Hz)')
        plt.ylabel('FFT Amplitude')
        plt.show()

        
#         except:
#             print("no fft")
```

```{python}
circadianTime=np.arange(24)
hours_sin = np.sin(2 * np.pi * circadianTime / 24)
hours_cos = np.cos(2 * np.pi * circadianTime / 24)

circadianDf = pd.DataFrame()
circadianDf['circadian_time']=circadianTime
circadianDf['sin_hours']=hours_sin
circadianDf['cos_hours']=hours_cos

plt.scatter(x=circadianTime,y=hours_sin,label='Sin_hours')
plt.scatter(x=circadianTime,y=hours_cos,label='Cos_hours')
plt.legend()
```

```{python}
circadianDf
```

```{python}
os.getcwd()
```

```{python}
light_sin_cos_encoding=pd.read_csv('../../../TRN_Cellbox-main/Data/Interim_Data/Cellbox_Inputs/Light_Circadian_Oshea/Perturbations/Light_Sin_Cos.csv')
```

```{python}
for con in conditionDf.index:
    print(conditionDf.loc[con])
```

```{python}
for i in range(conditionResultsDf.shape[1]):
    linOut=linregress(conditionDf['light_itensity'],conditionResultsDf.iloc[:,i])
    
    if linOut.pvalue < 0.9:
        print(linOut)
        
        plt.scatter(x=conditionDf['light_itensity'],y=conditionResultsDf.iloc[:,i])
        plt.xlabel('light_intensity')
        plt.ylabel(t4NodeNewdf.iloc[i].values[0])
        plt.show()
        try:
            fftOut=fft(conditionResultsDf.iloc[:,i])
            print('FFT:')
            print(fftOut)
        except:
            print("no fft")
```

```{python}
#| collapsed: true
for i in range(conditionResultsDf.shape[1]):
    linOut=linregress(12*np.arcsin(conditionDf['sin_hours'])/np.pi,conditionResultsDf.iloc[:,i])

    if linOut.pvalue < 0.9:
        print(linOut)
        plt.scatter(x=12*np.arcsin(conditionDf['sin_hours'])/np.pi,y=conditionResultsDf.iloc[:,i])
        plt.xlabel('Circadian Time')
        plt.ylabel(t4NodeNewdf.iloc[i].values[0])
        plt.show()
        try:
            fftOut=fft(conditionResultsDf.iloc[:,i])
            print('FFT:')
            print(fftOut)
        except:
            print("no fft")
```

```{python}
#| scrolled: true
conditionDf
```

```{python}
# 24 Hour encoding 
data = {
    'hour': np.arange(0, 24),
    'target': np.sin(np.arange(0, 24)) 
}
df = pd.DataFrame(data)

#Encoding sin/cos
time_delta_hours_sin = np.sin(2 * np.pi * df['hour'] / 24)
time_delta_hours_cos = np.cos(2 * np.pi * df['hour'] / 24)

data_dict = {
    'Hour_Sin': time_delta_hours_sin,
    'Hour_Cos': time_delta_hours_cos
}

# Create a DataFrame
time_24 = pd.DataFrame(data_dict)


time_24.plot(subplots=True, figsize=(14, 8),
         sharex=True, title="Sin/Cos encoding",
         legend=False);
```

```{python}
data_dict
```

```{python}
conditionDf
```

```{python}
testTime = time_delta_hours_sin+time_delta_hours_cos
```

```{python}
plt.plot(testTime)
```

```{python}
fftOut=sc.fftpack.fft((signal).values)
#             print('FFT:')
revfft = sc.fftpack.ifft((fftOut))
N=len(fftOut)
n=np.arange(N)
sr=len(fftOut)
T=N/sr
freq=n/T
# plt.plot(fftOut)
plt.stem(freq,np.abs(fftOut))
plt.xlabel('Freq (Hz)')
plt.ylabel('FFT Amplitude')
plt.show()
```

```{python}
plt.plot(revfft)
```

```{python}
plt.stem(freq,np.abs(fftOut))
```

```{python}
sinSig = np.sin(np.arange(24)*(2*np.pi/24))
plt.plot(sinSig)
```

```{python}
signal=12*np.arcsin(data_dict['Hour_Sin'])/np.pi
plt.plot(signal)
```

```{python}
2 * np.pi/24
```


```{python}
time_delta_hours_sin = np.sin(2 * np.pi * sinSig / 24)
time_delta_hours_cos = np.cos(2 * np.pi * sinSig / 24)
```

```{python}
plt.plot(time_delta_hours_cos)
```

```{python}






































```

